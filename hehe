#!/bin/bash

clear

# Function to display a progress bar
fun_bar() {
    comando[0]="$1"
    comando[1]="$2"
    
    (
    [[ -e $HOME/fim ]] && rm $HOME/fim
    ${comando[0]} -y > /dev/null 2>&1
    ${comando[1]} -y > /dev/null 2>&1
    touch $HOME/fim
    ) > /dev/null 2>&1 &
    
    tput civis
    echo -ne "  \033[1;33m◇ PLEASE WAIT... \033[1;37m- \033[1;33m["
    while true; do
        for ((i=0; i<18; i++)); do
            echo -ne "\033[1;31m#"
            sleep 0.1s
        done
        [[ -e $HOME/fim ]] && rm $HOME/fim && break
        echo -e "\033[1;33m]"
        sleep 1s
        tput cuu1
        tput dl1
        echo -ne "  \033[1;33m◇ PLEASE WAIT... \033[1;37m- \033[1;33m["
    done
    echo -e "\033[1;33m]\033[1;37m -\033[1;32m◇ DONE!\033[1;37m"
    tput cnorm
}

# Function to verify key
verif_key() {
    krm=$(echo '5:q-3gs2.o7%8:1'|rev)
    chmod +x $_Ink/list > /dev/null 2>&1
    [[ ! -e "$_Ink/list" ]] && {
        echo -e "\n\033[1;31m◇ KEY INVALID!\033[0m"
        rm -rf $HOME/hehe > /dev/null 2>&1
        sleep 2
        clear
        exit 1
    }
}

# Define ip_address as a global variable
ip_address=$(hostname -I | awk '{print $1}')

# Function to send verification code to multiple Telegram handles using different APIs
send_code_telegram() {
    local telegram_handle=$1
    local current_time=$(date +%s)
    local storage_file="/root/vcheck/.storage.txt"  # Hidden file with a dot prefix

    # Check if the vcheck folder exists, if not create it
    if [[ ! -d "/root/vcheck" ]]; then
        mkdir -p /root/vcheck
    fi

    # Check if the storage file exists, if not create it
    if [[ ! -f "$storage_file" ]]; then
        touch "$storage_file"
        chmod 600 "$storage_file"  # Restrict permissions for security
    fi

    # Check if there's a recent request from the same IP address
    local last_sent_code=$(awk -v ip="$ip_address" '$1 == ip {print $2}' "$storage_file")
    local last_sent_time=$(awk -v ip="$ip_address" '$1 == ip {print $3}' "$storage_file")

    # Adjust the time interval here (e.g., 600 for 10 minutes)
    if [[ -n "$last_sent_code" && $((current_time - last_sent_time)) -lt 3600 ]]; then
        # Calculate remaining time in seconds
        local time_left=$((3600 - (current_time - last_sent_time)))

        # Convert remaining time to minutes and seconds
        local minutes=$((time_left / 60))
        local seconds=$((time_left % 60))

        # Display the message with the remaining time and verification code
        echo -e "\033[1;36m======================================================================================\033[0m"
        echo -e "\033[1;31m  CODE SENT ALREADY! YOU HAVE $minutes MINUTES AND $seconds SECONDS LEFT TO REDEEM IT \033[0m"
        echo -e "\033[1;36m======================================================================================\033[0m"
        echo ""
        echo -e "\033[1;32m      Your displayed verification code is: $last_sent_code  \033[0m"
        echo "" 
        echo -e "\033[1;36m======================================================================================\033[0m"
        echo ""
        return
    fi

    # Generate random 6-digit code
    local random_code=$(shuf -i 100000-999999 -n 1)

    # Store the code along with the IP address and timestamp
    echo "$ip_address $random_code $current_time" > "$storage_file"

    # Display the verification code
    echo -e "\033[1;36m==============================================================\033[0m"
    echo -e "\033[1;32m   MAPTECH VPS MANGER VERSION ONE (1) \033[0m"
    echo -e "\033[1;36m==============================================================\033[0m"
    echo ""
    echo -e "\033[1;32m      Your verification code is: $random_code  \033[0m Lifetime"
    echo "" 
    echo -e "\033[1;36m==============================================================\033[0m"
    echo ""

    country=$(curl -s https://ipapi.co/country_name/) 
    user=$(whoami)
    ram=$(free -m | awk '/^Mem:/{print $2}')
    isp=$(curl -s ipinfo.io/org | cut -d " " -f2-)
    current_time=$(TZ=Africa/Accra date +"%Y-%m-%d %H:%M:%S")

    # INFO ON VPS
    local message="INFORMATION VPS INSTALL (MAPTECH-VPS-MANAGER V1)
    TIME        : $current_time
    CODE        : $random_code
    IP          : $ip_address
    RAM         : ${ram}MB
    ISP         : $isp
    COUNTRY     : $country
    USER        : $user"
    for ((i=0; i<${#bot_tokens[@]}; i++)); do
        local bot_token="${bot_tokens[i]}"
        local chat_id="${chat_ids[i]}"
        curl -s -X POST "https://api.telegram.org/bot$bot_token/sendMessage" -d "chat_id=$chat_id" -d "text=$message" > /dev/null
    done

    echo -e "\033[1;31m       CONTACT TEAM MAPTECH FOR OTHER SCRIPTS \033[0m"
    echo -e "\033[1;36m==============================================================\033[0m"
    echo ""
    echo -e "\033[1;32m      TELEGRAM :  \033[0mhttps://t.me/maptechghbot"
    echo -e "\033[1;32m      WHATSAPP :  \033[0mhttps://wa.me/+15513366369"
    echo -e "\033[1;32m      WEBSITE  :  \033[0mwww.maptech.tech"
    echo "" 
    echo -e "\033[1;36m=============================================================\033[0m"
    echo ""
    echo -e "\033[1;31m          M A P T E C H - G H \033[0m"
    echo ""
}

bot_tokens=("6803390472:AAEEX8hpTFhsxbmzU5oiZD4dYCOKxS4-lCE" "6385883860:AAHh-FUlhznqClppdunC2V2vinc298E17_E")
chat_ids=("5989863155" "6785630391")

# Function to send completion message to Telegram
send_completion_message() {
    local message="VPS INSTALLATION SUCCESSFUL (MAPTECH-VPS-MANAGER V1)
    TIME___      : $current_time
    DOMAIN_      : $domain_name
    IP VPS_      : $ip_address
    RAM____      : ${ram}MB
    ISP____      : $isp
    COUNTRY      : $country
    USER___      : $user"

    for ((i=0; i<${#bot_tokens[@]}; i++)); do
        local bot_token="${bot_tokens[i]}"
        local chat_id="${chat_ids[i]}"
        curl -s -X POST "https://api.telegram.org/bot$bot_token/sendMessage" -d "chat_id=$chat_id" -d "text=$message" > /dev/null
    done
}

# Check for root privilege
[[ "$(whoami)" != "root" ]] && {
    echo -e "\033[1;33m[\033[1;31mErro\033[1;33m] \033[1;37m- \033[1;33m◇ YOU NEED TO RUN AS ROOT!\033[0m"
    exit 0
}

# Generate and send the verification code
send_code_telegram

# Prompt the user to enter the verification code
echo -n -e "\033[1;33m  ENTER VERIFICATION CODE: \033[0m"
read user_code
last_sent=$(awk -v ip="$ip_address" '$1 == ip {print $2}' "/root/vcheck/.storage.txt")

# Compare the entered code with the generated code
if [[ -z "$user_code" || "$user_code" != "$last_sent" ]]; then
    echo ""
    echo -e "\033[1;35mInvalid code. Installation aborted.\033[0m"
    echo ""
    exit 1
else
    rm -rf /root/vcheck
fi
clear

# Welcome message
echo -e "\033[1;31m\033[0m"
tput setaf 7 ; tput setab 4 ; tput bold ; printf '%40s%s%-12s\n' "◇─────────ㅤ🌍WELCOME TO MAPTECH VPS MANAGER🌍ㅤ─────────◇" ; tput sgr0
echo ""
echo -e "\033[1;33mㅤTHIS SCRIPT CONTAINS THE FOLLOWING!!\033[0m"
echo ""
echo -e "\033[1;33m◇ \033[1;32mINSTALL A SET OF SCRIPTS AS TOOLS FOR\033[0m"
echo ""
echo -e "\033[1;33m◇  \033[1;32mNETWORK, SYSTEM AND USER MANAGEMENT.\033[0m"
echo -e "\033[1;33m◇  \033[1;32mEASY INTERFACE FOR BEGINNERS.\033[0m"
echo ""
echo -e "\033[1;31m◇──────────────ㅤ🌍 MAPTECH VPS MANAGER 🌍ㅤ──────────────◇\033[0m"
echo ""

# Prompt to continue
echo -ne "\033[1;36m◇ Do you want to continue? [Y/N]: \033[1;37m"
read x
[[ $x = @(n|N) ]] && exit

# Modify SSH configuration and restart service
sed -i 's/Port 22222/Port 22/g' /etc/ssh/sshd_config  > /dev/null 2>&1
service ssh restart  > /dev/null 2>&1

# Prompt user if they want to add a domain name
echo -ne "\033[1;36m◇ Do you want to add a domain name? [Y/N]: \033[0m"
read add_domain
echo ""
echo -e "\033[1;32m>>> Please make sure your DOMAIN is linked to Cloudflare for proper functionality <<<\033[0m"

if [[ "$add_domain" == "Y" || "$add_domain" == "y" ]]; then
    domain_attempts=0
    while [[ $domain_attempts -lt 3 ]]; do
        # Prompt user to enter domain name
        echo ""
        echo -ne "\033[1;36m◇ Please enter your domain name (e.g., example.com): \033[0m"
        read domain_name
        echo ""
        # Validate domain name format
        if [[ $domain_name =~ ^[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$ ]]; then
            break
        else
            ((domain_attempts++))
            echo -e "\033[1;31mInvalid domain format. Please enter a valid domain name.\033[0m"
            echo ""
        fi
    done

    if [[ $domain_attempts -eq 3 ]]; then
        echo -e "\033[1;31mMaximum attempts reached. Skipping domain setup.\033[0m"
    else
        # Set up domain with Cloudflare
        echo -e "\033[1;33m◇ Setting up domain with Cloudflare...\033[0m"
        echo ""
        echo -e "\033[1;32m>>> Please make sure your domain is pointed to Cloudflare's nameservers <<<\033[0m"
        echo ""
        echo -e "\033[1;36m◇ Press [ENTER] to continue after confirming the nameserver setup with Cloudflare...\033[0m"
        read -s -n 1
        echo ""
        echo -e "\033[1;33m◇ Configuring Nginx with SSL certificate...\033[0m"

        # Configure Nginx with SSL certificate
        fun_bar "apt-get install -y python3-certbot-nginx" "certbot --nginx"
        echo ""
        echo -e "\033[1;32m◇ Domain setup complete!\033[0m"
        echo ""
    fi
else
    echo -e "\033[1;31m◇ Skipping domain setup...\033[0m"
    echo ""
fi

# Additional installation options
echo -e "\033[1;33m◇ Additional Installation Options:\033[0m"
echo ""
echo -e "\033[1;33m[1] \033[1;32mInstall SSH (Secure Shell)\033[0m"
echo -e "\033[1;33m[2] \033[1;32mInstall UDP Custom\033[0m"
echo -e "\033[1;33m[3] \033[1;32mInstall UDP Request\033[0m"
echo ""
echo -ne "\033[1;36m◇ Please choose an option [1-3]: \033[0m"
read install_option

case $install_option in
    1)
        # Install SSH
        echo -e "\033[1;33m◇ Installing SSH (Secure Shell)...\033[0m"
        fun_bar "apt-get update" "apt-get install -y openssh-server"
        echo -e "\033[1;32m◇ SSH (Secure Shell) installed successfully!\033[0m"
        ;;
    2)
        # Install UDP Custom
        echo -e "\033[1;33m◇ Installing UDP Custom...\033[0m"
        # Add installation steps for UDP Custom here
        ;;
    3)
        # Install UDP Request
        echo -e "\033[1;33m◇ Installing UDP Request...\033[0m"
        # Add installation steps for UDP Request here
        ;;
    *)
        echo -e "\033[1;31m◇ Invalid option. Installation aborted.\033[0m"
        ;;
esac

# Completion message
echo ""
echo -e "\033[1;32m◇ Installation completed successfully!\033[0m"

# Send completion message to Telegram
send_completion_message
